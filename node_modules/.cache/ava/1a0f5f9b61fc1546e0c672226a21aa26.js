'use strict';

var _index = require('/Users/masongalland/Devmtn/sql/node_modules/babel-runtime/regenerator/index.js');

var _index2 = _interopRequireDefault(_index);

var _asyncToGenerator2 = require('/Users/masongalland/Devmtn/sql/node_modules/babel-runtime/helpers/asyncToGenerator.js');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('/Users/masongalland/Devmtn/sql/node_modules/babel-runtime/core-js/promise.js');

var _promise2 = _interopRequireDefault(_promise);

var _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _supertestAsPromised = require('supertest-as-promised');

var _supertestAsPromised2 = _interopRequireDefault(_supertestAsPromised);

var _index3 = require('./index');

var _index4 = _interopRequireDefault(_index3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import Faker from 'faker'

function sleep(time) {
  return new _promise2.default(function (resolve) {
    return setTimeout(resolve, time);
  });
}

_ava2.default.before(function () {
  return sleep(1000).then(function () {});
});

(0, _ava2.default)('Get Users request works and returns correct users', function () {
  var _ref = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee(t) {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder(),
        _rec3 = new _powerAssertRecorder();

    var res, missing;
    return _index2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/users').expect(200);

          case 2:
            res = _context.sent;

            t.is(_rec._expr(_rec._capt(_rec._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200, \'Status is not 200\')',
              filepath: 'test.js',
              line: 19,
              async: true
            }), 200, 'Status is not 200');
            t.truthy(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(_rec2._capt(res, 'arguments/0/left/object/object').body, 'arguments/0/left/object').length, 'arguments/0/left') >= 3, 'arguments/0'), {
              content: 't.truthy(res.body.length >= 3, \'There should be at least 3 users\')',
              filepath: 'test.js',
              line: 20,
              async: true
            }), 'There should be at least 3 users');
            missing = res.body.reduce(function (prev, cur) {
              if (prev.indexOf(cur.firstname) > -1) {
                prev.splice(prev.indexOf(cur.firstname), 1);
              }
              return prev;
            }, ["Dave", "John", "Jane"]);

            t.truthy(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(missing, 'arguments/0/left/object').length, 'arguments/0/left') === 0, 'arguments/0'), {
              content: 't.truthy(missing.length === 0, missing.join(", ") + " are missing from the database")',
              filepath: 'test.js',
              line: 28,
              async: true
            }), missing.join(", ") + " are missing from the database");

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

(0, _ava2.default)('Get Vehicles request works and returns correct users', function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee2(t) {
    var _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    var res, missing;
    return _index2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/vehicles').expect(200);

          case 2:
            res = _context2.sent;

            t.is(_rec4._expr(_rec4._capt(_rec4._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200, \'Status is not 200\')',
              filepath: 'test.js',
              line: 35,
              async: true
            }), 200, 'Status is not 200');
            t.truthy(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(_rec5._capt(res, 'arguments/0/left/object/object').body, 'arguments/0/left/object').length, 'arguments/0/left') >= 6, 'arguments/0'), {
              content: 't.truthy(res.body.length >= 6, \'There should be at least 6 vehicles\')',
              filepath: 'test.js',
              line: 36,
              async: true
            }), 'There should be at least 6 vehicles');
            missing = res.body.reduce(function (prev, cur) {
              if (prev.indexOf(cur.model) > -1) {
                prev.splice(prev.indexOf(cur.model), 1);
              }
              return prev;
            }, ["Camry", "Civic", "Focus", "Taurus", "Bug", "Coup"]);

            t.truthy(_rec6._expr(_rec6._capt(_rec6._capt(_rec6._capt(missing, 'arguments/0/left/object').length, 'arguments/0/left') === 0, 'arguments/0'), {
              content: 't.truthy(missing.length === 0, "The " + missing.join(", ") + " are missing from the database")',
              filepath: 'test.js',
              line: 44,
              async: true
            }), "The " + missing.join(", ") + " are missing from the database");

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());

(0, _ava2.default)('Post User works', function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee3(t) {
    var _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder(),
        _rec9 = new _powerAssertRecorder();

    var checkId, newUser, res, userCheckData, foundUser;
    return _index2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            checkId = Math.floor(Math.random() * 100);
            newUser = { firstname: "Mr", lastname: "Clean", email: "Clean@Machine." + checkId };
            _context3.next = 4;
            return (0, _supertestAsPromised2.default)(_index4.default).post('/api/users').send(newUser);

          case 4:
            res = _context3.sent;


            t.is(_rec7._expr(_rec7._capt(_rec7._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200, \'Status is not 200\')',
              filepath: 'test.js',
              line: 54,
              async: true
            }), 200, 'Status is not 200');
            _context3.next = 8;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/users');

          case 8:
            userCheckData = _context3.sent;


            t.is(_rec8._expr(_rec8._capt(_rec8._capt(userCheckData, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(userCheckData.status, 200, "GET Users endpoint must be written to evaluate test")',
              filepath: 'test.js',
              line: 58,
              async: true
            }), 200, "GET Users endpoint must be written to evaluate test");
            foundUser = userCheckData.body.reduce(function (prev, cur) {
              return prev || cur.email == newUser.email;
            }, false);


            t.truthy(_rec9._expr(_rec9._capt(foundUser, 'arguments/0'), {
              content: 't.truthy(foundUser, "New user was not found in the database")',
              filepath: 'test.js',
              line: 63,
              async: true
            }), "New user was not found in the database");

          case 12:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}());

(0, _ava2.default)('Post Vehicle works', function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee4(t) {
    var _rec10 = new _powerAssertRecorder(),
        _rec11 = new _powerAssertRecorder(),
        _rec12 = new _powerAssertRecorder();

    var year, newUser, res, vehicleCheckData, foundUser;
    return _index2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            year = Math.floor(Math.random() * 100 + 2200);
            newUser = { make: "Bat", model: "Mobile", year: year, ownerId: 2 };
            _context4.next = 4;
            return (0, _supertestAsPromised2.default)(_index4.default).post('/api/vehicles').send(newUser);

          case 4:
            res = _context4.sent;


            t.is(_rec10._expr(_rec10._capt(_rec10._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200, \'Status is not 200\')',
              filepath: 'test.js',
              line: 73,
              async: true
            }), 200, 'Status is not 200');
            _context4.next = 8;
            return sleep(100);

          case 8:
            _context4.next = 10;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/vehicles');

          case 10:
            vehicleCheckData = _context4.sent;

            t.is(_rec11._expr(_rec11._capt(_rec11._capt(vehicleCheckData, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(vehicleCheckData.status, 200, "GET Vehicles endpoint must be written to evaluate test")',
              filepath: 'test.js',
              line: 77,
              async: true
            }), 200, "GET Vehicles endpoint must be written to evaluate test");
            foundUser = vehicleCheckData.body.reduce(function (prev, cur) {
              return prev || cur.year == newUser.year;
            }, false);

            t.truthy(_rec12._expr(_rec12._capt(foundUser, 'arguments/0'), {
              content: 't.truthy(foundUser, "New vehicle was not found in the database")',
              filepath: 'test.js',
              line: 81,
              async: true
            }), "New vehicle was not found in the database");

          case 14:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}());

(0, _ava2.default)('Get Count of Vehicles By owner\'s Id', function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee5(t) {
    var res, db;
    return _index2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/user/1/vehiclecount');

          case 2:
            res = _context5.sent;
            db = _index4.default.get('db');

            db.run('SELECT Count(*) FROM vehicles WHERE ownerId = 1', function (err, response) {
              var _rec13 = new _powerAssertRecorder(),
                  _rec14 = new _powerAssertRecorder(),
                  _rec15 = new _powerAssertRecorder(),
                  _rec16 = new _powerAssertRecorder();

              t.is(_rec13._expr(_rec13._capt(_rec13._capt(res, 'arguments/0/object').status, 'arguments/0'), {
                content: 't.is(res.status, 200, \'Status is not 200\')',
                filepath: 'test.js',
                line: 90
              }), 200, 'Status is not 200');
              t.truthy(_rec14._expr(_rec14._capt(_rec14._capt(_rec14._capt(res, 'arguments/0/object/object').body, 'arguments/0/object').count, 'arguments/0'), {
                content: 't.truthy(res.body.count, \'Expected an object with a count property\')',
                filepath: 'test.js',
                line: 91
              }), 'Expected an object with a count property');
              t.is(_rec15._expr(_rec15._capt(_rec15._capt(_rec15._capt(res, 'arguments/0/object/object').body, 'arguments/0/object').count, 'arguments/0'), {
                content: 't.is(res.body.count, response[0].count, \'The count is not correct.\')',
                filepath: 'test.js',
                line: 92
              }), _rec16._expr(_rec16._capt(_rec16._capt(_rec16._capt(response, 'arguments/1/object/object')[0], 'arguments/1/object').count, 'arguments/1'), {
                content: 't.is(res.body.count, response[0].count, \'The count is not correct.\')',
                filepath: 'test.js',
                line: 92
              }), 'The count is not correct.');
            });

          case 5:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
}());

(0, _ava2.default)('Get Vehicles By owner\'s Id', function () {
  var _ref6 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee6(t) {
    var _rec17 = new _powerAssertRecorder(),
        _rec18 = new _powerAssertRecorder(),
        _rec19 = new _powerAssertRecorder(),
        _rec20 = new _powerAssertRecorder(),
        _rec21 = new _powerAssertRecorder();

    var res, checkId;
    return _index2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/user/1/vehicle');

          case 2:
            res = _context6.sent;

            t.is(_rec17._expr(_rec17._capt(_rec17._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200, \'Status is not 200\')',
              filepath: 'test.js',
              line: 100,
              async: true
            }), 200, 'Status is not 200');
            t.truthy(_rec18._expr(_rec18._capt(_rec18._capt(_rec18._capt(res, 'arguments/0/object/object').body, 'arguments/0/object').length, 'arguments/0'), {
              content: 't.truthy(res.body.length, \'Expected an object with a count property\')',
              filepath: 'test.js',
              line: 101,
              async: true
            }), 'Expected an object with a count property');
            t.truthy(_rec19._expr(_rec19._capt(_rec19._capt(_rec19._capt(_rec19._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').make, 'arguments/0'), {
              content: 't.truthy(res.body[0].make, \'Expected a make propety\')',
              filepath: 'test.js',
              line: 102,
              async: true
            }), 'Expected a make propety');
            t.truthy(_rec20._expr(_rec20._capt(_rec20._capt(_rec20._capt(_rec20._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').model, 'arguments/0'), {
              content: 't.truthy(res.body[0].model, \'Expected a model property\')',
              filepath: 'test.js',
              line: 103,
              async: true
            }), 'Expected a model property');
            checkId = res.body.reduce(function (prev, cur) {
              if (!prev) return prev;
              return cur.ownerId = 1;
            }, true);

            t.truthy(_rec21._expr(_rec21._capt(checkId, 'arguments/0'), {
              content: 't.truthy(checkId, \'Not all cars returned have ownerId of 1\')',
              filepath: 'test.js',
              line: 108,
              async: true
            }), 'Not all cars returned have ownerId of 1');

          case 9:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  }));

  return function (_x6) {
    return _ref6.apply(this, arguments);
  };
}());

(0, _ava2.default)('Get Vehicles By Email', function () {
  var _ref7 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee7(t) {
    var _rec22 = new _powerAssertRecorder(),
        _rec23 = new _powerAssertRecorder(),
        _rec24 = new _powerAssertRecorder(),
        _rec25 = new _powerAssertRecorder(),
        _rec26 = new _powerAssertRecorder();

    var res, checkEmail;
    return _index2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/vehicle?UserEmail=John@Smith.com');

          case 2:
            res = _context7.sent;

            t.is(_rec22._expr(_rec22._capt(_rec22._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200, \'Status is not 200\')',
              filepath: 'test.js',
              line: 114,
              async: true
            }), 200, 'Status is not 200');
            // t.is(res.body.length >=3 , 'Expected at least 3 cars for John@Smith.com')
            t.truthy(_rec23._expr(_rec23._capt(_rec23._capt(_rec23._capt(_rec23._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').email, 'arguments/0'), {
              content: 't.truthy(res.body[0].email, \'Expected to see an email propety\')',
              filepath: 'test.js',
              line: 116,
              async: true
            }), 'Expected to see an email propety');
            t.truthy(_rec24._expr(_rec24._capt(_rec24._capt(_rec24._capt(_rec24._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').make, 'arguments/0'), {
              content: 't.truthy(res.body[0].make, \'Expected to see a make propety\')',
              filepath: 'test.js',
              line: 117,
              async: true
            }), 'Expected to see a make propety');
            t.truthy(_rec25._expr(_rec25._capt(_rec25._capt(_rec25._capt(_rec25._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').model, 'arguments/0'), {
              content: 't.truthy(res.body[0].model, \'Expected to see a model propety\')',
              filepath: 'test.js',
              line: 118,
              async: true
            }), 'Expected to see a model propety');
            checkEmail = res.body.reduce(function (prev, cur) {
              if (!prev) return prev;
              return cur.email = "John@Smith.com";
            }, true);

            t.truthy(_rec26._expr(_rec26._capt(checkEmail, 'arguments/0'), {
              content: 't.truthy(checkEmail, \'Not all vehicles returned were for John@Smith.com\')',
              filepath: 'test.js',
              line: 123,
              async: true
            }), 'Not all vehicles returned were for John@Smith.com');

          case 9:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  }));

  return function (_x7) {
    return _ref7.apply(this, arguments);
  };
}());

(0, _ava2.default)('Get Vehicles By Partial First Name', function () {
  var _ref8 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee8(t) {
    var _rec27 = new _powerAssertRecorder(),
        _rec28 = new _powerAssertRecorder(),
        _rec29 = new _powerAssertRecorder(),
        _rec30 = new _powerAssertRecorder(),
        _rec31 = new _powerAssertRecorder(),
        _rec32 = new _powerAssertRecorder();

    var res, checkEmail, missing;
    return _index2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/vehicle?userFirstStart=J');

          case 2:
            res = _context8.sent;

            t.is(_rec27._expr(_rec27._capt(_rec27._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200, \'Status is not 200\')',
              filepath: 'test.js',
              line: 129,
              async: true
            }), 200, 'Status is not 200');
            // t.is(res.body.length >=3 , 'Expected at least 3 cars for John@Smith.com')
            t.truthy(_rec28._expr(_rec28._capt(_rec28._capt(_rec28._capt(_rec28._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').firstname, 'arguments/0'), {
              content: 't.truthy(res.body[0].firstname, \'Expected to see a firstname propety\')',
              filepath: 'test.js',
              line: 131,
              async: true
            }), 'Expected to see a firstname propety');
            t.truthy(_rec29._expr(_rec29._capt(_rec29._capt(_rec29._capt(_rec29._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').make, 'arguments/0'), {
              content: 't.truthy(res.body[0].make, \'Expected to see a make propety\')',
              filepath: 'test.js',
              line: 132,
              async: true
            }), 'Expected to see a make propety');
            t.truthy(_rec30._expr(_rec30._capt(_rec30._capt(_rec30._capt(_rec30._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').model, 'arguments/0'), {
              content: 't.truthy(res.body[0].model, \'Expected to see a model propety\')',
              filepath: 'test.js',
              line: 133,
              async: true
            }), 'Expected to see a model propety');
            t.truthy(_rec31._expr(_rec31._capt(_rec31._capt(_rec31._capt(_rec31._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').year, 'arguments/0'), {
              content: 't.truthy(res.body[0].year, \'Expected to see a year propety\')',
              filepath: 'test.js',
              line: 134,
              async: true
            }), 'Expected to see a year propety');
            checkEmail = res.body.reduce(function (prev, cur) {
              if (!prev) return prev;
              return cur.firstname[0] == "J";
            }, true);
            missing = res.body.reduce(function (prev, cur) {
              if (prev.indexOf(cur.firstname) > -1) {
                prev.splice(prev.indexOf(cur.firstname), 1);
              }
              return prev;
            }, ["Jane", "John"]);

            t.is(_rec32._expr(_rec32._capt(_rec32._capt(missing, 'arguments/0/object').length, 'arguments/0'), {
              content: 't.is(missing.length, 0, missing.join(", ") + \' should have pulled up in this query\')',
              filepath: 'test.js',
              line: 146,
              async: true
            }), 0, missing.join(", ") + ' should have pulled up in this query');

          case 11:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, undefined);
  }));

  return function (_x8) {
    return _ref8.apply(this, arguments);
  };
}());

(0, _ava2.default)('Get Vehicles newer than 2000, sort newest first', function () {
  var _ref9 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee9(t) {
    var _rec33 = new _powerAssertRecorder(),
        _rec34 = new _powerAssertRecorder(),
        _rec35 = new _powerAssertRecorder(),
        _rec36 = new _powerAssertRecorder(),
        _rec37 = new _powerAssertRecorder();

    var res;
    return _index2.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _context9.next = 2;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/newervehiclesbyyear');

          case 2:
            res = _context9.sent;

            t.is(_rec33._expr(_rec33._capt(_rec33._capt(res, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(res.status, 200, \'Status is not 200\')',
              filepath: 'test.js',
              line: 152,
              async: true
            }), 200, 'Status is not 200');

            t.truthy(_rec34._expr(_rec34._capt(_rec34._capt(_rec34._capt(res, 'arguments/0/object/object').body, 'arguments/0/object').length, 'arguments/0'), {
              content: 't.truthy(res.body.length, \'Expected at least 1 new car\')',
              filepath: 'test.js',
              line: 154,
              async: true
            }), 'Expected at least 1 new car');
            t.truthy(_rec35._expr(_rec35._capt(_rec35._capt(_rec35._capt(_rec35._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').firstname, 'arguments/0'), {
              content: 't.truthy(res.body[0].firstname, \'Expected owners firstname\')',
              filepath: 'test.js',
              line: 155,
              async: true
            }), 'Expected owners firstname');
            t.truthy(_rec36._expr(_rec36._capt(_rec36._capt(_rec36._capt(_rec36._capt(res, 'arguments/0/object/object/object').body, 'arguments/0/object/object')[0], 'arguments/0/object').lastname, 'arguments/0'), {
              content: 't.truthy(res.body[0].lastname, \'Expected owners lastname\')',
              filepath: 'test.js',
              line: 156,
              async: true
            }), 'Expected owners lastname');

            t.truthy(_rec37._expr(_rec37._capt(_rec37._capt(_rec37._capt(_rec37._capt(_rec37._capt(_rec37._capt(res, 'arguments/0/left/left/object/object/object').body, 'arguments/0/left/left/object/object')[0], 'arguments/0/left/left/object').year, 'arguments/0/left/left') - _rec37._capt(_rec37._capt(_rec37._capt(_rec37._capt(res, 'arguments/0/left/right/object/object/object').body, 'arguments/0/left/right/object/object')[_rec37._capt(_rec37._capt(_rec37._capt(_rec37._capt(res, 'arguments/0/left/right/object/property/left/object/object').body, 'arguments/0/left/right/object/property/left/object').length, 'arguments/0/left/right/object/property/left') - 1, 'arguments/0/left/right/object/property')], 'arguments/0/left/right/object').year, 'arguments/0/left/right'), 'arguments/0/left') >= 0, 'arguments/0'), {
              content: 't.truthy(res.body[0].year - res.body[res.body.length - 1].year >= 0, \'Expected newest cars first\')',
              filepath: 'test.js',
              line: 158,
              async: true
            }), 'Expected newest cars first');

          case 8:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, undefined);
  }));

  return function (_x9) {
    return _ref9.apply(this, arguments);
  };
}());

(0, _ava2.default)('Update Vehicle to new Owner', function () {
  var _ref10 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee10(t) {
    var _rec38 = new _powerAssertRecorder(),
        _rec39 = new _powerAssertRecorder(),
        _rec40 = new _powerAssertRecorder();

    var getCars, car, updateRequest, getCars2, match;
    return _index2.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/vehicles');

          case 2:
            getCars = _context10.sent;


            t.is(_rec38._expr(_rec38._capt(_rec38._capt(getCars, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(getCars.status, 200, "Must write GET /api/vehicles endpoint before this test")',
              filepath: 'test.js',
              line: 165,
              async: true
            }), 200, "Must write GET /api/vehicles endpoint before this test");

            car = getCars.body.reduce(function (prev, cur) {
              if (cur.ownerid == 2) {
                return cur;
              }
              return prev;
            }, {});
            _context10.next = 7;
            return (0, _supertestAsPromised2.default)(_index4.default).put('/api/vehicle/' + car.id + '/user/3');

          case 7:
            updateRequest = _context10.sent;

            t.is(_rec39._expr(_rec39._capt(_rec39._capt(updateRequest, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(updateRequest.status, 200, "Update Request Status should be 200")',
              filepath: 'test.js',
              line: 175,
              async: true
            }), 200, "Update Request Status should be 200");
            _context10.next = 11;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/vehicles');

          case 11:
            getCars2 = _context10.sent;
            match = getCars2.body.reduce(function (prev, cur) {
              return prev || (cur.id == car.id ? cur.ownerid : 0);
            }, 0);


            t.is(_rec40._expr(_rec40._capt(match, 'arguments/0'), {
              content: 't.is(match, 3, "Car should be updated to ownerId of 3")',
              filepath: 'test.js',
              line: 183,
              async: true
            }), 3, "Car should be updated to ownerId of 3");

          case 14:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, undefined);
  }));

  return function (_x10) {
    return _ref10.apply(this, arguments);
  };
}());

(0, _ava2.default)('Remove Vehicles Owner', function () {
  var _ref11 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee11(t) {
    var _rec41 = new _powerAssertRecorder(),
        _rec42 = new _powerAssertRecorder(),
        _rec43 = new _powerAssertRecorder();

    var getCars, car, updateRequest, getCars2, match;
    return _index2.default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/vehicles');

          case 2:
            getCars = _context11.sent;

            t.is(_rec41._expr(_rec41._capt(_rec41._capt(getCars, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(getCars.status, 200, "Must write GET /api/vehicles endpoint before this test")',
              filepath: 'test.js',
              line: 189,
              async: true
            }), 200, "Must write GET /api/vehicles endpoint before this test");
            car = getCars.body.reduce(function (prev, cur) {
              if (cur.ownerid == 3) {
                return cur;
              }
              return prev;
            }, {});
            _context11.next = 7;
            return (0, _supertestAsPromised2.default)(_index4.default).delete('/api/user/3/vehicle/' + car.id);

          case 7:
            updateRequest = _context11.sent;

            t.is(_rec42._expr(_rec42._capt(_rec42._capt(updateRequest, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(updateRequest.status, 200, "Update Request Status should be 200")',
              filepath: 'test.js',
              line: 199,
              async: true
            }), 200, "Update Request Status should be 200");
            _context11.next = 11;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/vehicles');

          case 11:
            getCars2 = _context11.sent;
            match = getCars2.body.reduce(function (prev, cur) {
              return prev || (cur.id == car.id ? cur.ownerid : 0);
            }, 0);

            t.truthy(_rec43._expr(_rec43._capt(!_rec43._capt(match, 'arguments/0/argument'), 'arguments/0'), {
              content: 't.truthy(!match, "ownerId not removed from vehicle")',
              filepath: 'test.js',
              line: 205,
              async: true
            }), "ownerId not removed from vehicle");

          case 14:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, undefined);
  }));

  return function (_x11) {
    return _ref11.apply(this, arguments);
  };
}());

(0, _ava2.default)('Deleting A Vehicle', function () {
  var _ref12 = (0, _asyncToGenerator3.default)(_index2.default.mark(function _callee12(t) {
    var _rec44 = new _powerAssertRecorder(),
        _rec45 = new _powerAssertRecorder(),
        _rec46 = new _powerAssertRecorder(),
        _rec47 = new _powerAssertRecorder(),
        _rec48 = new _powerAssertRecorder(),
        _rec49 = new _powerAssertRecorder();

    var newUser, makeCar, findCar, car, deleteRes, checkCars, carGone;
    return _index2.default.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return sleep(1000);

          case 2:
            newUser = { make: "Delete", model: "Me", year: 11, ownerId: 1 };
            _context12.next = 5;
            return (0, _supertestAsPromised2.default)(_index4.default).post('/api/vehicles').send(newUser);

          case 5:
            makeCar = _context12.sent;
            _context12.next = 8;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/vehicles');

          case 8:
            findCar = _context12.sent;

            t.is(_rec44._expr(_rec44._capt(_rec44._capt(findCar, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(findCar.status, 200, "The Get Vehicles endpoint is not working")',
              filepath: 'test.js',
              line: 217,
              async: true
            }), 200, "The Get Vehicles endpoint is not working");
            car = findCar.body.reduce(function (prev, cur) {
              if (cur.make == "Delete") return cur;
              return prev;
            }, {});


            t.truthy(_rec45._expr(_rec45._capt(_rec45._capt(car, 'arguments/0/object').id, 'arguments/0'), {
              content: 't.truthy(car.id, "Not Creating new cars")',
              filepath: 'test.js',
              line: 223,
              async: true
            }), "Not Creating new cars");

            _context12.next = 14;
            return (0, _supertestAsPromised2.default)(_index4.default).delete('/api/vehicle/' + car.id);

          case 14:
            deleteRes = _context12.sent;


            t.is(_rec46._expr(_rec46._capt(_rec46._capt(deleteRes, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(deleteRes.status, 200, "Delete Request status not 200")',
              filepath: 'test.js',
              line: 228,
              async: true
            }), 200, "Delete Request status not 200");

            _context12.next = 18;
            return (0, _supertestAsPromised2.default)(_index4.default).get('/api/vehicles');

          case 18:
            checkCars = _context12.sent;


            t.is(_rec47._expr(_rec47._capt(_rec47._capt(checkCars, 'arguments/0/object').status, 'arguments/0'), {
              content: 't.is(checkCars.status, 200, "Request status not 200")',
              filepath: 'test.js',
              line: 233,
              async: true
            }), 200, "Request status not 200");
            carGone = checkCars.body.reduce(function (prev, cur) {
              if (cur.id == car.id) prev = false;
              return prev;
            }, true);

            t.truthy(_rec48._expr(_rec48._capt(_rec48._capt(_rec48._capt(checkCars, 'arguments/0/object/object').body, 'arguments/0/object').length, 'arguments/0'), {
              content: 't.truthy(checkCars.body.length, "Should not delete all cars")',
              filepath: 'test.js',
              line: 238,
              async: true
            }), "Should not delete all cars");
            t.truthy(_rec49._expr(_rec49._capt(carGone, 'arguments/0'), {
              content: 't.truthy(carGone, "The car was not removed")',
              filepath: 'test.js',
              line: 239,
              async: true
            }), "The car was not removed");

          case 23:
          case 'end':
            return _context12.stop();
        }
      }
    }, _callee12, undefined);
  }));

  return function (_x12) {
    return _ref12.apply(this, arguments);
  };
}());
//# sourceMappingURL=node_modules/.cache/ava/1a0f5f9b61fc1546e0c672226a21aa26.js.map